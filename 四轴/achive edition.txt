void Timer2_4ms()
{
	cli();
	TCCR2A = 0;
	TCCR2B = 0;
	TCNT2 = 0;
	//OCR2A = 156;//10ms for 1024
	//OCR2A = 255;//16ms for 1024
	OCR2A = 249;//4ms for 256 prescaling
	TCCR2A |= (1 << WGM21);//CTC mode:
	//TCCR2B |= (1 << CS20) | (1 << CS21) | (1 << CS22);// prescaling 1024 ;different from other timers
	TCCR2B |= (1 << CS20) | (1 << CS21) | (0 << CS22);// prescaling 256 
	TIMSK2 |= (1 << OCIE2A);
	sei();          // enable global interrupts
}

ISR(TIMER2_COMPA_vect)
{
	if (!Timer2OverflowCounts++ % 3)
		mainCirculation();
	if (!Timer2OverflowCounts % 50) bitSet(PINB, 5);  //invert PIN11
}

#pragma region decode PPM-PWM Signal by Interruption
//volatile int channelHighTime1, channelHighTime2, channelHighTime3, channelHighTime4, channelHighTime5, channelHighTime6;
void decodeInterruptInitial()
{
	//Digital Pins Usable For Interrupts on MEGA2560 : 2, 3, 18, 19, 20, 21

	//思路2:用两个中断引脚各连三个接收机引脚,因为高电平不同时,建立各全局变量count,当时间大于5ms则认定为新一轮数据,然后依次填入count++
	//思路3:每20us扫描一次,判断状态
	attachInterrupt(digitalPinToInterrupt(2), channel1, CHANGE);
	attachInterrupt(digitalPinToInterrupt(3), channel2, CHANGE);
	attachInterrupt(digitalPinToInterrupt(18), channel3, CHANGE);
	attachInterrupt(digitalPinToInterrupt(19), channel4, CHANGE);
	//attachInterrupt(digitalPinToInterrupt(20), channel5, CHANGE);
	//attachInterrupt(digitalPinToInterrupt(21), channel6, CHANGE);

}

void channel1()
{
	static unsigned int LastChannelValue = 1500;
	static unsigned int LastTCNT2 = 0;
	static unsigned int lastTimer2OverflowCounts = 0;
	int intervalTicks = ((int)TCNT2 - LastTCNT2 + Timer2PeriodTicks * (int)((int)Timer2OverflowCounts - lastTimer2OverflowCounts));
	//如果计算得为PWM低电平周期或Timer2OverflowCounts溢出导致负数,则舍去	
	if (intervalTicks > MinChannelTicks && intervalTicks < MaxChannelTicks)
	{
		int channelValue = (LastChannelValue + channel_yaw + intervalTicks * Timer2Period) / 3;
		LastChannelValue = channel_yaw;
		channel_yaw = channelValue;
		channel1NewValue = true;
	}

	lastTimer2OverflowCounts = Timer2OverflowCounts;
	LastTCNT2 = TCNT2;
}
void channel2()
{
	static unsigned int LastChannelValue = 1500;
	static unsigned int LastTCNT2 = 0;
	static unsigned int lastTimer2OverflowCounts = 0;
	int intervalTicks = ((int)TCNT2 - LastTCNT2 + Timer2PeriodTicks * (int)((int)Timer2OverflowCounts - lastTimer2OverflowCounts));

	//如果计算得为PWM低电平周期或Timer2OverflowCounts溢出导致负数,则舍去	
	if (intervalTicks > MinChannelTicks && intervalTicks < MaxChannelTicks)
	{
		int channelValue = (LastChannelValue + channel_pitch + intervalTicks * Timer2Period) / 3;
		LastChannelValue = channel_pitch;
		channel_pitch = channelValue;
	}
	lastTimer2OverflowCounts = Timer2OverflowCounts;
	LastTCNT2 = TCNT2;
}
void channel3()
{
	static unsigned int LastChannelValue = 1000;
	static unsigned int LastTCNT2 = 0;
	static unsigned int lastTimer2OverflowCounts = 0;
	int intervalTicks = ((int)TCNT2 - LastTCNT2 + Timer2PeriodTicks * (int)((int)Timer2OverflowCounts - lastTimer2OverflowCounts));

	//如果计算得为PWM低电平周期或Timer2OverflowCounts溢出导致负数,则舍去	
	if (intervalTicks > MinChannelTicks && intervalTicks < MaxChannelTicks)
	{
		int channelValue = (LastChannelValue + channel_thrust + intervalTicks * Timer2Period) / 3;
		LastChannelValue = channel_thrust;
		channel_thrust = channelValue;
	}

	lastTimer2OverflowCounts = Timer2OverflowCounts;
	LastTCNT2 = TCNT2;
}
void channel4()
{
	static unsigned int LastChannelValue = 1500;
	static unsigned int LastTCNT2 = 0;
	static unsigned int lastTimer2OverflowCounts = 0;
	int intervalTicks = ((int)TCNT2 - LastTCNT2 + Timer2PeriodTicks * (int)((int)Timer2OverflowCounts - lastTimer2OverflowCounts));

	//如果计算得为PWM低电平周期或Timer2OverflowCounts溢出导致负数,则舍去	
	if (intervalTicks > MinChannelTicks && intervalTicks < MaxChannelTicks)
	{
		int channelValue = (LastChannelValue + channel_roll + intervalTicks * Timer2Period) / 3;
		LastChannelValue = channel_roll;
		channel_roll = channelValue;
	}

	lastTimer2OverflowCounts = Timer2OverflowCounts;
	LastTCNT2 = TCNT2;
}

//archive editions

/*
void channel1()
{
	static unsigned int LastTCNT2 = 0;
	static unsigned int lastTimer2OverflowCounts = 0;
	unsigned int CurrentTCNT2 = TCNT2;
	int interval;
	if (!Timer2OverflowCounts)
		interval = (CurrentTCNT2 - LastTCNT2 + Timer2Period) * 16;
	else
		interval = (CurrentTCNT2 - LastTCNT2 + Timer2Period * (Timer2OverflowCounts - lastTimer2OverflowCounts)) * 16;
	if (interval > 500 && interval < 2500)
		channel_yaw = interval;
	lastTimer2OverflowCounts = Timer2OverflowCounts;
	LastTCNT2 = CurrentTCNT2;
	channel1NewValue = true;
}
void channel2()
{
	static unsigned int LastTCNT2 = 0;
	static unsigned int lastTimer2OverflowCounts = 0;
	unsigned int CurrentTCNT2 = TCNT2;
	int interval;
	if (!Timer2OverflowCounts)
		interval = (CurrentTCNT2 - LastTCNT2 + Timer2Period) * 16;
	else
		interval = (CurrentTCNT2 - LastTCNT2 + Timer2Period * (Timer2OverflowCounts - lastTimer2OverflowCounts)) * 16;
	if (interval > 500 && interval < 2500)
		channel_pitch = interval;
	lastTimer2OverflowCounts = Timer2OverflowCounts;
	LastTCNT2 = CurrentTCNT2;
}
void channel3()
{
	static unsigned int LastTCNT2 = 0;
	static unsigned int lastTimer2OverflowCounts = 0;
	unsigned int CurrentTCNT2 = TCNT2;
	int interval;
	if (!Timer2OverflowCounts)
		interval = (CurrentTCNT2 - LastTCNT2 + Timer2Period) * 16;
	else
		interval = (CurrentTCNT2 - LastTCNT2 + Timer2Period * (Timer2OverflowCounts - lastTimer2OverflowCounts)) * 16;
	if (interval > 500 && interval < 2500)
		channel_thrust = interval;
	lastTimer2OverflowCounts = Timer2OverflowCounts;
	LastTCNT2 = CurrentTCNT2;
}
void channel4()
{
	static unsigned int LastTCNT2 = 0;
	static unsigned int lastTimer2OverflowCounts = 0;
	unsigned int CurrentTCNT2 = TCNT2;
	int interval;
	if (!Timer2OverflowCounts)
		interval = (CurrentTCNT2 - LastTCNT2 + Timer2Period) * 16;
	else
		interval = (CurrentTCNT2 - LastTCNT2 + Timer2Period * (Timer2OverflowCounts - lastTimer2OverflowCounts)) * 16;
	if (interval > 500 && interval < 2500)
		channel_roll = interval;
	lastTimer2OverflowCounts = Timer2OverflowCounts;
	LastTCNT2 = CurrentTCNT2;
}
void channel5()
{
	static unsigned int LastTCNT2 = 0;
	static unsigned int lastTimer2OverflowCounts = 0;
	unsigned int CurrentTCNT2 = TCNT2;
	int interval;
	if (!Timer2OverflowCounts)
		interval = (CurrentTCNT2 - LastTCNT2 + Timer2Period) * 16;
	else
		interval = (CurrentTCNT2 - LastTCNT2 + Timer2Period * (Timer2OverflowCounts - lastTimer2OverflowCounts)) * 16;
	if (interval > 500 && interval < 2500)
		channel_switch = interval;
	lastTimer2OverflowCounts = Timer2OverflowCounts;
	LastTCNT2 = CurrentTCNT2;
}
void channel6()
{
	static unsigned int LastTCNT2 = 0;
	static unsigned int lastTimer2OverflowCounts = 0;
	unsigned int CurrentTCNT2 = TCNT2;
	int interval;
	if (!Timer2OverflowCounts)
		interval = (CurrentTCNT2 - LastTCNT2 + Timer2Period) * 16;
	else
		interval = (CurrentTCNT2 - LastTCNT2 + Timer2Period * (Timer2OverflowCounts - lastTimer2OverflowCounts)) * 16;
	if (interval > 500 && interval < 2500)
		channel_rotaryKnob = interval;
	lastTimer2OverflowCounts = Timer2OverflowCounts;
	LastTCNT2 = CurrentTCNT2;
}
*/

/*

void ChannelReceiverA()
{
	static int channel_num = 0;
	static unsigned long lastTime = 0;
	int timeInterval = micros() - lastTime;
	if (timeInterval > 5000)
		channel_num = 0;
	else if (timeInterval > 100 && timeInterval < 3000)
	{
		switch (channel_num)
		{
		case 0:
			channelValue[0] = timeInterval;
			channel_num = 2;
			break;
		case 2:
			channelValue[2] = timeInterval;
			channel_num = 4;
			break;
		case 4:
			channelValue[4] = timeInterval;
			channel_num = 0;
			break;
		default:
			channel_num = 0;
			break;
		}
	}
	lastTime = micros();

}
void ChannelReceiverB()
{
	static int channel_num = 0;
	static unsigned long lastTime = 0;
	int timeInterval = micros() - lastTime;
	if (timeInterval > 10000)
		channel_num = 1;
	else if (timeInterval > 100 && timeInterval < 3000)
	{
		switch (channel_num)
		{
		case 1:
			channelValue[1] = timeInterval;
			channel_num = 3;
			break;
		case 3:
			channelValue[3] = timeInterval;
			channel_num = 5;
			break;
		case 5:
			channelValue[5] = timeInterval;
			channel_num = 1;
			break;
		default:
			channel_num = 1;
			break;
		}
	}
	lastTime = micros();

}

*/

/*
#pragma region decode by 20 us interruption
//依赖的全局变量
//volatile int channelHighTime[6];
//volatile boolean channelDecodeDone = false;
//volatile boolean channelDecodeNewValue = false;

void delay_20microseconds()
{
	cli();
	TCCR4A = 0;
	TCCR4B = 0;
	OCR4A = 320;
	TCCR4B |= (1 << WGM42);//CTC mode:
	TCCR4B |= (1 << CS40);//No prescaling
	TIMSK4 |= (1 << OCIE4A);
	sei();          // enable global interrupts
}

//和Servo库冲突
ISR(TIMER4_COMPA_vect)
{
	channelReceiverDecoder();
}

void channelReceiverDecoder()
{
	//be called per 20us
	static int HighVoltageCounts[6] = { 0 };
	static int lowVoltageCounts = 0;

	if (channelDecodeDone)
	{
		for (int i = 0; i < 6; i++)
			if (digitalRead(ChannelReceiverPin[i]))
			{
				HighVoltageCounts[i]++;
				channelDecodeDone = false;
			}
	}
	else
	{
		boolean nonHighVoltage = true;
		for (int i = 0; i < 6; i++)
			if (digitalRead(ChannelReceiverPin[i]))  
				HighVoltageCounts[i]++, nonHighVoltage = false;
		if (nonHighVoltage)
			if (lowVoltageCounts++ > 10)
			{
				for (int i = 0; i < 6; i++)
				{

					if (25 < HighVoltageCounts[i] && HighVoltageCounts[i] < 125)        
						channelHighTime[i] = HighVoltageCounts[i] * 20;
					HighVoltageCounts[i] = 0;
				}
				lowVoltageCounts = 0;
				channelDecodeDone = true;
				channelDecodeNewValue = true;
			}
	}
}

#pragma endregion
//decode by 20 us interruption
*/
#pragma endregion


void motorInitialization()
{
	for (int i = 0; i < 4; i++)
		motor[i].write(2000);
	delay(2000);
	for (int i = 0; i < 4; i++)
		motor[i].write(1000);
	delay(2000);
	for (int i = 0; i < 4; i++)
		motor[i].write(1100);
	delay(3000);
	for (int i = 0; i < 4; i++)
		motor[i].write(1000);
	delay(1000);
}
